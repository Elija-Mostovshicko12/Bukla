var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { promise as ping } from "ping";
import { Builder } from "./API/main";
import VK from "./API/vk/main";
import Profile from "./API/profile/main";
import Audio from "./API/audio/main";
import Utils from "./API/utils/main";
/**
 * DevUp API constructor
 */
class DevUp extends Builder {
    /**
     *
     * @param {Object|string} params - Можно передать либо токен, либо набор параметров ({@link IOptions})
     * @example
     * const { DevUp } = require(`api-devup`);
     *
     * const API = new DevUp("token");
     * // Or
     * const API = new DevUp({
     * 	token: "token",
     * 	apiHeaders: {
     * 		"User-Agent": "Custom-UserAgent"
     * 	}
     * });
     */
    constructor(params) {
        super(params);
        this.vk = new VK(params);
        this.profile = new Profile(params);
        this.audio = new Audio(params);
        this.utils = new Utils(params);
    }
    /**
     * Метод для выполнения запроса к недобавленным методам
     * @param {string} method - Метод
     * @param {Record<string, any>} [params={}] - Параметры
     * @example
     * API.call("profile.get").then(res => console.log(res));
     */
    call(method, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.postRequest(method, params);
        });
    }
    /**
     * Позволяет узнать текущий пинг до API
     * @returns {Object} Объект с результатом {@link PingResponse}
     * @example
     * API.ping().then(res => console.log(res));
     */
    ping() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.apiURL;
            let hostname;
            url.indexOf("//") > -1
                ? (hostname = url.split("/")[2])
                : (hostname = url.split("/")[0]);
            hostname = hostname.split(":")[0];
            hostname = hostname.split("?")[0];
            const PingData = yield ping.probe(hostname);
            return {
                host: PingData.host,
                alive: PingData.alive,
                time: Number(PingData.time) || 0,
                ip: PingData.numeric_host || "0.0.0.0",
            };
        });
    }
}
export default DevUp;
