var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Builder } from "./../main";
import * as getStickers from "./methods/getStickers";
import * as getStickerInfo from "./methods/getStickerInfo";
import * as getGroups from "./methods/getGroups";
import * as getApps from "./methods/getApps";
export default class VK extends Builder {
    constructor(params) {
        super(params);
        /**
         * getStickers
         */
        this.getStickers = (params) => __awaiter(this, void 0, void 0, function* () { return this.postRequest(getStickers.method, params); });
        this.getStickerInfo = (params) => __awaiter(this, void 0, void 0, function* () { return this.postRequest(getStickerInfo.method, params); });
        this.getGroups = (params) => __awaiter(this, void 0, void 0, function* () { return this.postRequest(getGroups.method, params); });
        this.getApps = (params) => __awaiter(this, void 0, void 0, function* () { return this.postRequest(getApps.method, params); });
    }
}
