"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ping_1 = require("ping");
const main_1 = require("./API/main");
const main_2 = __importDefault(require("./API/vk/main"));
const main_3 = __importDefault(require("./API/profile/main"));
const main_4 = __importDefault(require("./API/audio/main"));
const main_5 = __importDefault(require("./API/utils/main"));
/**
 * DevUp API constructor
 */
class DevUp extends main_1.Builder {
    /**
     *
     * @param {Object|string} params - Можно передать либо токен, либо набор параметров ({@link IOptions})
     * @example
     * const { DevUp } = require(`api-devup`);
     *
     * const API = new DevUp("token");
     * // Or
     * const API = new DevUp({
     * 	token: "token",
     * 	apiHeaders: {
     * 		"User-Agent": "Custom-UserAgent"
     * 	}
     * });
     */
    constructor(params) {
        super(params);
        this.vk = new main_2.default(params);
        this.profile = new main_3.default(params);
        this.audio = new main_4.default(params);
        this.utils = new main_5.default(params);
    }
    /**
     * Метод для выполнения запроса к недобавленным методам
     * @param {string} method - Метод
     * @param {Record<string, any>} [params={}] - Параметры
     * @example
     * API.call("profile.get").then(res => console.log(res));
     */
    call(method, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.postRequest(method, params);
        });
    }
    /**
     * Позволяет узнать текущий пинг до API
     * @returns {Object} Объект с результатом {@link PingResponse}
     * @example
     * API.ping().then(res => console.log(res));
     */
    ping() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.apiURL;
            let hostname;
            url.indexOf("//") > -1
                ? (hostname = url.split("/")[2])
                : (hostname = url.split("/")[0]);
            hostname = hostname.split(":")[0];
            hostname = hostname.split("?")[0];
            const PingData = yield ping_1.promise.probe(hostname);
            return {
                host: PingData.host,
                alive: PingData.alive,
                time: Number(PingData.time) || 0,
                ip: PingData.numeric_host || "0.0.0.0",
            };
        });
    }
}
exports.default = DevUp;
