import { Builder } from "./API/main";
import { IOptions, API_Response, PingResponse } from "./../types";
import VK from "./API/vk/main";
import Profile from "./API/profile/main";
import Audio from "./API/audio/main";
import Utils from "./API/utils/main";
/**
 * DevUp API constructor
 */
declare class DevUp extends Builder {
    vk: VK;
    profile: Profile;
    audio: Audio;
    utils: Utils;
    /**
     *
     * @param {Object|string} params - Можно передать либо токен, либо набор параметров ({@link IOptions})
     * @example
     * const { DevUp } = require(`api-devup`);
     *
     * const API = new DevUp("token");
     * // Or
     * const API = new DevUp({
     * 	token: "token",
     * 	apiHeaders: {
     * 		"User-Agent": "Custom-UserAgent"
     * 	}
     * });
     */
    constructor(params: IOptions | string);
    /**
     * Метод для выполнения запроса к недобавленным методам
     * @param {string} method - Метод
     * @param {Record<string, any>} [params={}] - Параметры
     * @example
     * API.call("profile.get").then(res => console.log(res));
     */
    call(method: string, params?: Record<string, any>): API_Response<any>;
    /**
     * Позволяет узнать текущий пинг до API
     * @returns {Object} Объект с результатом {@link PingResponse}
     * @example
     * API.ping().then(res => console.log(res));
     */
    ping(): Promise<PingResponse>;
}
export default DevUp;
