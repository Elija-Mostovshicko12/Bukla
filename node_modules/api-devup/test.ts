// import { DevUp } from "./src/main";

// const test = new DevUp("test");

// test.profile
// 	.get()
// 	.then((res) => console.log(res))
// 	.catch((err) => err);

/**
 * T = never, E = never
 * ensures that E and T are not inferred by the compiler. Without
 * it, if you try to call failable in a context where the return
 * type isn't known,  E and T will be inferred to {} (due to Typescript's
 * lack of global type inference)
 *
 * So, for in the example
 * const a = failable(({ success }) => success(1)
 * Here, a will have type Failable<{}, {}> which is type safe,
 * but not really useful. Ensuring that the user specifies the type
 * will reduce the confusion/vague type errors.
 */
