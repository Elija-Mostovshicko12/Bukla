'use strict';

const Promise = require('bluebird');

/* Версия VK API */
exports.API_VERSION = '5.62';

/**
 * Добавляет метод в очередь запросов
 *
 * @param string method
 * @param object params
 *
 * @return Promise
 */
exports._api = function(method,params = {}){
	return new Promise((resolve,reject) => {
		this._queue.push({
			method,
			params,
			resolve,
			reject
		});

		if (!this._tasks.launched) {
			this._apiWorked();
		}
	});
};

/**
 * Выполняет метод
 *
 * @param object task
 */
exports._executeMethod = function(tasks){
	let apiCalls = [];
	for(let i in tasks)
		apiCalls.push('API.' + tasks[i].method + '(' + JSON.stringify(tasks[i].params) + ')');
	let code = 'return [' + apiCalls.join(',') + '];';
	console.log(code);

	this.request({
		uri: 'https://api.vk.com/method/execute',
		timeout: this.settings.timeout * 1e3,
		proxy: this.settings.proxy,
		form: {
			code: code
		},
		method: 'POST',
		json: true,
		qs: {
			access_token: this.settings.token,
			v: this.API_VERSION
		}
	})
	.then((result) => {
		// if ('error' in result) {
		// 	result = this._apiError(result.error,task);

		// 	if ((result.error_code === 14 || result.error_code !== 6) && 'captcha' in task) {
		// 		task.captcha.reject(result);
		// 	}

		// 	return;
		// }

		// if ('captcha' in task) {
		// 	task.captcha.resolve();
		// }
		if(result.error)
		{
			if(result.error.error_code == 6)
			{
				for(let i in tasks)
					this._queue.unshift(tasks[i]);
				return;
			}
		}
		for(let i in tasks)
		{
			let task = tasks[i];
			task.resolve(result.response[i]);
		}
	})
	.catch((error) => {
		// let {restartError,restartCount} = this.settings;

		// if (!('restarts' in task)) {
		// 	task.restarts = 0;
		// }

		// let isRestart = task.restarts < restartCount;

		// if (restartError && isRestart && !this._checkConnectReject(error)) {
		// 	++task.restarts;

		// 	this.logger.debug(
		// 		'Restarting method request',
		// 		task.method,
		// 		'the number of attempts',
		// 		task.restarts
		// 	);

		// 	return setTimeout(() => this._apiRestart(task),3e3);
		// }

		// error = new this.RequestError(error);

		// if ('captcha' in task) {
		// 	task.captcha.reject(error);
		// }

		this.logger.error('Request method error',error);

		return task.reject(error);
	});
};

/**
 * Выполняет методы из очереди
 */
exports._apiWorked = function(){
	const timer = 1133/this.settings.limit;

	let tasks = this._tasks;

	tasks.launched = true;

	/**
	 * Проверяет очередь на выполнения задачи
	 */
	const worker = () => {
		if (this._queue.length === 0) {
			clearTimeout(tasks.id);

			return tasks.launched = false;
		}

		if(this._queue.length)
			this._executeMethod(this._queue.splice(0, (this._queue.length >= 25) ? 25 : this._queue.length));
		tasks.id = setTimeout(worker,timer);
	};

	worker();
};


/**
 * Перезапускает метод
 *
 * @param object task
 */
exports._apiRestart = function(task){
	this._queue.unshift(task);

	if (!this._tasks.launched) {
		this._apiWorked();
	}
};
